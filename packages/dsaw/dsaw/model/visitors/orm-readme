DSAW Object Relational Mapper (ORM)
-----------------------------------

Dsaw's orm can handle simple data objects easily, and also provide powerful ways
to fine tune the mapping from data object to database.

The purpose of this orm is to allow developers to decorate their data objects
so that they can be stored in a db. There are limitations of what this orm can do,
but hopefully it can cover most of the well-designed data objects that have no
cyclic references. 

Dsaw-orm allows this decoration of data objects to be
non-intrusive: you will only need to add a few things to the implementation
of your classes, and do not need to modify any members or methods of your data objects.
You can instantiate and use your data objects as normal after retrieving them from the db.
And in many cases, it is very simple to decorate your data objects.

Dsaw-orm tries to map essential attributes of data objects to db tables.
"Essential" means that when restoring a data object from db, those attributes
form a complete set that fully recover the data object.

For simple data objects that only have attributes of simple types such
as int, str, float, etc, it is very easy to make the data object recognizable
by dsaw-orm. For example, suppose we have a data object::

	class Atom:
	
	  def __init__(self, symbol, xyz):
	    self.symbol = symbol
	    self.xyz = xyz

The essential attributes for Atom objects are "symbol" and "xyz",
and we can make it orm-able by adding class attributes "symbol" and "xyz"::

	class Atom:
	  
	  def __init__(self, symbol, xyz):
	    self.symbol = symbol
	    self.xyz = xyz
	
	  symbol = 'H'
	  xyz = [0.,0.,0.]

Dsaw-orm automatically recognizes the attribute 'symbol' is a string and
defaults to 'H', and attribute 'xyz' is a float array and defaults to 
[0.,0.,0.]. They will be mapped to two columns "symbol" and "xyz", correspondingly.

You may notice that in this simple class, the attributes are "public", and are
settable by the constructor __init__. If your class does not use this convention, 
for example, the Atom class may be implemented this way:

	class Atom:
	
	  def __init__(self, symbol):
	    self._symbol = symbol
	    self._xyz = xyz

Here the essential attributes 'symbol' and 'xyz' are saved as "private" data members of
an instance of "Atom".

This is just one of many ways how these essential attributes could be stored.
How can orm knows where to find those essential data to be saved in db?
Dsaw-orm provides one simple API to solve this problem.
To make such data objects orm-able, you will need one 
additional method "__establishInventory__".
For this second Atom class implementation, we decorate it to be::

	class Atom:
	
	  def __init__(self, symbol):
	    self._symbol = symbol
	    self._xyz = xyz
	
	  # symbol and xyz are the essential attributes
	  symbol = 'H'
	  xyz = [0.,0.,0.]
	
	  def __establishInventory__(self, inventory):
	    "Transfers my essential attributes to an inventory, so that they can be stored into db"
	    inventory.symbol = self._symbol
	    inventory.xyz = self._xyz

In the __establishInventory__ method, you will need to establish 
in the given inventory the values of the essential attributes.


When restoring a data object from a db, we need to be able to construct
the data object from the values of the essential attributes stored in the db.
The constructor in the above implementations of the Atom class is good because it
takes the essential attributes as the arguments.
But what if the constructor of the data object does not initialize anything::

	class Atom:
	
	  def __init__(self): self._symbol = None; self._xyz = None
	
	  def setSymbol(self, symbol): self._symbol = symbol
	  def setxyz(self, xyz): self._xyz = xyz

For such an implementation, we need one more method __restoreFromInventory__::

	class Atom:
	
	  def __init__(self): self._symbol = None; self._xyz = None
	
	  def setSymbol(self, symbol): self._symbol = symbol
	  def setxyz(self, xyz): self._xyz = xyz
	
	  # symbol and xyz are the essential attributes
	  symbol = 'H'
	  xyz = [0.,0.,0.]
	
	  def __establishInventory__(self, inventory):
	    "Transfers my essential attributes to an inventory, so that they can be stored into db"
	    inventory.symbol = self._symbol
	    inventory.xyz = self._xyz
	
	  def __restoreFromInventory__(self, inventory):
	    "Restore myself by retrieving my essential attributes from the given inventory"
	    self.setSymbol(inventory.symbol)
	    self.setxyz(inventory.xyz)


Up to now, we us class attributes to establish the "essential attributes".
This might turn out to be not good. For example, the following implementation::

	clas Atom:
	  def __init__(self): self._symbol = None; self._xyz = None
	  def _getSymbol(self): return self._symbol
	  def _setSymbol(self, symbol): self._symbol = symbol
	  symbol = property(_getSymbol, _setSymbol)
	  def _getxyz(self): return self._xyz
	  def _setxyz(self, xyz): self._xyz = xyz
	  xyz = property(_getxyz, _setxyz)

In this example, the original class already declare symbol and xyz to be 
"properties". 

There are other examples where simply defined class attributes won't work well.
The solution to this problem is to define an "Inventory" class:

	class Atom:
	  def __init__(self): self._symbol = None; self._xyz = None
	  def _getSymbol(self): return self._symbol
	  def _setSymbol(self, symbol): self._symbol = symbol
	  symbol = property(_getSymbol, _setSymbol)
	  def _getxyz(self): return self._xyz
	  def _setxyz(self, xyz): self._xyz = xyz
	  xyz = property(_getxyz, _setxyz)
	  from dsaw.model.Inventory import Inventory as InvBase
	  class Inventory(InvBase):
	    symbol = InvBase.d.str(name='symbol')
	    xyz = InvBase.d.array(name='xyz', elementtype='float')

A manually-defined Inventory class (which is the "portal" to your data object)
allows you to fine-tune the properties of the attributes.
For example, yOu can define validator of each attribute. 
In the following you can also see how to define references of different
types of associations by using Inventory.



References
^^^^^^^^^^^^^^

A reference is used to describe an association of two data objects.
You can establish a reference just using the class attribute:

	class Lattice: ...
	class Structure:
	  ...
	  lattice = Lattice(...)

References established this way always describe a "ownership". 
In this example, a structure always owns a lattice, which means
the lattice instance referred by the structure instance will be
destroyed when the structure instance is gone.
You can have better control of the type of the association by
explicitly declare it in the Inventory:

	class Structure:
	  ...
	  from dsaw.model.Inventory import Inventory as InvBase
	  class Inventory(InvBase):
	    latice = InvBase.d.reference(name='lattice', targettype=..., owned=...)



ReferenceSet
^^^^^^^^^^^^^^

ReferenceSet is used to describe aggregation or composition.

Again, you could use class attributes to describe the "essential attributes":

	class Atom: ...
	class Structure:
	  ...
	  atoms = [Atom(...)]
	
	or you could declare the attribute in the inventory:
	
	class Atom: ...
	class Structure:
	  ...
	  from dsaw.model.Inventory import Inventory as InvBase
	  class Inventory(InvBase):
	    atoms = InvBase.d.referenceSet(name='atoms', owned=...)




Subtle issues
^^^^^^^^^^^^^^

If you create a data object, save it to the db, and then use
orm.load to load it back, the data object is a new data object that
represents what is in the database and is a different instance than
the original one you created. You probably should not have two
of them floating around. You should remove the original instance
and just work on the new one just loaded.



OrmManager
^^^^^^^^^^

Create OrmManager
"""""""""""""""""""

_id = 0
def guid():
    global _id
    _id += 1
    return str(_id)
from dsaw.db import connect
db = connect(db ='postgres:///test')
db.autocommit(True)
from dsaw.model.visitors.OrmManager import OrmManager
return OrmManager(db, guid)


Use OrmManager
"""""""""""""""""""

orm.save(obj)
orm.load(type, id)
orm.destroy(obj)
