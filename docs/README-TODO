Content TODO:

get doc strings from pyre/inventory/__init__.py

fix how 'documentation' at the top of every page links to nothing and 'home' links to the documentation (need sphinx site)

fix Index of science use cases so each entry display's section heading



do opal's class diagram?...or maybe make it a separate link...



discuss other configurations Curator does...
        # look for an environment variable with additional local directories
        try:
            plist = os.environ["PYTHIA_LOCAL"]
            if plist[0] == '[':
                plist = plist[1:]
            if plist[-1] == ']':
                plist = plist[:-1]
            local += plist.split(',')
        except KeyError:
            pass

        # gain access to the user settings from the command line
        db = registry.extractNode(self._DB_NAME)
(i.e. environment variables and db...)


discuss what happens to your application as it runs (go through code that runs, perhaps as a uml diagram)
-

explain odb and pml as types of codecs (portmanteau of 'coder-decoder')--talk about where this is in the class diagram

discuss how to configure odb user, system, and local depositories (in pyre.inventory.odb.prefix.py)

discuss how to put in a new codec?

explain how initdb.py works

have a "Pyre concepts" page (intermediate pyre)...Weaver, Curator (, etc.


*talk about adding this line to your components:
    def _getPrivateDepositoryLocations(self):
        return ['../config']


*look for all TODO's in code and address them...

*do class diagrams like this: http://matplotlib.sourceforge.net/devel/documenting_mpl.html#inheritance-diagrams

*put into pyre docs:

me:  did you reset anything on one of the pml files?  can't remember how you did this before...
 Jiao:  idd-config.pml
property "tid"
 me:  ahhh...that's right...
thx!!!
 Jiao:  sure


* eventually change the look and feel to help people understand it is revised...use http://matplotlib.sourceforge.net/sampledoc/custom_look.html


*put in Make.mm examples and discussion of macros



*put in the following pages: 
> Is the outline here a start for what the reader needs to know?
> http://wiki.cacr.caltech.edu/danse/index.php/Talk:Frequently_Asked_Questions

I think there's a fair lesson plan that Michael and I discussed earlier,
and has been posted here:
 http://danse.us/trac/pyre/wiki/User_Guide
 http://danse.us/trac/pyre/wiki/Pyre
 http://danse.us/trac/pyre/wiki/Journal
 
 * B: look at pyre tests for more examples about how to use component framework in app... 
 *get what's his name to do a flash intro to pyre (maybe a composite of various images and some animation...)
 *and a flash intro to vnf

*include a discussion on reserved methods/names in pyre...maybe start with this discussion:

Listing of reserved methods for pyre components and scripts
-----------------------------------------------------------

In reality, any method of a used by Component is "reserved", but here are some of the more obvious ones to avoid overriding (but instead use in your application):

* _configure()
* _defaults()
* _init()
* _fini()
* configureComponent()
* 

(give some examples of how each of these may be used--start with vnf's redirect)




"formatting" ideas: 
-try using pudge to generate rst documentation from source code
-would rst2odt and associated packages (python-odtwriter) convert odt back to rst?
-get editor access to wikipedia-like danse wiki pages and cut and paste into here directly, or convert to html
-google docs idea using html
-how to get emacs support:
http://docutils.sourceforge.net/tools/editors/emacs/README.html


get pyre on google wave?...or better yet get google docs to import the html and display it, then
